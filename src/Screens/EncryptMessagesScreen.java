/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Screens;

import BO.Encrypt;
import VO.KeyByCrypted;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import javax.swing.plaf.metal.MetalToggleButtonUI;
import savedata.SaveReadData;

/**
 *
 * @author felipe
 */
public class EncryptMessagesScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainPainel
     */
    public EncryptMessagesScreen() {
        initComponents();
        txtOutput.setToolTipText("Content copied to clip board.");
        ToolTipManager.sharedInstance().setEnabled(false);
        EventQueue.invokeLater(() -> {
            txtInput.grabFocus();
            txtInput.requestFocus();//or inWindow
        });        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnProcess = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        scrlOriginalMessage = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        scrlMainly1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        lblInput = new javax.swing.JLabel();
        lblOutput = new javax.swing.JLabel();
        cmbProtocol = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnEnableFindMode = new javax.swing.JToggleButton();
        lblSearchMode = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypt Helper");
        setResizable(false);

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnClean.setText("Clean");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtInput.setBackground(new java.awt.Color(227, 229, 229));
        txtInput.setColumns(10);
        txtInput.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtInput.setRows(5);
        scrlOriginalMessage.setViewportView(txtInput);

        txtOutput.setBackground(new java.awt.Color(11, 2, 3));
        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        txtOutput.setForeground(new java.awt.Color(149, 61, 61));
        txtOutput.setRows(5);
        txtOutput.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtOutput.setEnabled(false);
        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtOutputMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtOutputMouseExited(evt);
            }
        });
        scrlMainly1.setViewportView(txtOutput);

        lblInput.setFont(new java.awt.Font("Ubuntu", 3, 17)); // NOI18N
        lblInput.setText("Input");

        lblOutput.setFont(new java.awt.Font("Ubuntu", 3, 17)); // NOI18N
        lblOutput.setText("Output");

        cmbProtocol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "md5", "sha-1", "sha-256" }));
        cmbProtocol.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProtocolItemStateChanged(evt);
            }
        });
        cmbProtocol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbProtocolMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbProtocolMousePressed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/save.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnEnableFindMode.setForeground(new java.awt.Color(3, 3, 3));
        btnEnableFindMode.setText("OFF");
        btnEnableFindMode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnEnableFindModeStateChanged(evt);
            }
        });
        btnEnableFindMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableFindModeActionPerformed(evt);
            }
        });

        lblSearchMode.setFont(new java.awt.Font("Ubuntu", 3, 19)); // NOI18N
        lblSearchMode.setText("Helper");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSearchMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(scrlOriginalMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                                .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOutput)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEnableFindMode, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                            .addComponent(scrlMainly1))))
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInput)
                    .addComponent(lblOutput))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlOriginalMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                    .addComponent(scrlMainly1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(btnProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEnableFindMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        txtInput.setText("");
        txtOutput.setText("");
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        try{
            if (!txtInput.getText().equals("") && !cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()).equals(""))
                if (btnEnableFindMode.getActionCommand().equals("OFF"))
                    searchModeDisabled();
                else
                    searchModeEnabled();
            else
                JOptionPane.showMessageDialog(null,"Your input field is empty.","Alert", JOptionPane.WARNING_MESSAGE);
        }catch(Throwable e){}
        

    }//GEN-LAST:event_btnProcessActionPerformed

    private void searchModeDisabled() throws Throwable{
       txtOutput.setText(new Encrypt().encryptMessage(txtInput.getText(), cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex())));
    }
    
    private void searchModeEnabled() throws Throwable{
        if (!txtInput.getText().equals("") && !cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()).equals("")){
            SaveReadData save = new SaveReadData();
            try {
                
                KeyByCrypted keyByCrypted = save.findMode(txtInput.getText(), cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()));
                
                if( keyByCrypted != null ){
                    txtOutput.setText(keyByCrypted.getValue() + "  =  " + keyByCrypted.getKeyCrypted());
                }else{
                    txtOutput.setText("Object not found in the "+cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex())+" list.");
                }
            } catch (IOException ex) {
                Logger.getLogger(EncryptMessagesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else
            JOptionPane.showMessageDialog(null,"Your input field is empty.","Alert", JOptionPane.WARNING_MESSAGE);
    }
    
    private void cmbProtocolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbProtocolMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProtocolMouseClicked

    private void cmbProtocolMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbProtocolMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProtocolMousePressed

    private void cmbProtocolItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProtocolItemStateChanged
        // TODO add your handling code here:
        txtOutput.setText("");
        btnProcessActionPerformed(null);
    }//GEN-LAST:event_cmbProtocolItemStateChanged

    private void txtOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseClicked
        // TODO add your handling code here:
        if(!txtOutput.getText().equals("")){
            ToolTipManager.sharedInstance().setEnabled(true);
            String myString = txtOutput.getText();
            StringSelection stringSelection = new StringSelection(myString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        }else{
            ToolTipManager.sharedInstance().setEnabled(false);
        }
    }//GEN-LAST:event_txtOutputMouseClicked

    private void txtOutputMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseEntered
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(!txtOutput.getText().equals("")){
            ToolTipManager.sharedInstance().setEnabled(true);
            String myString = txtOutput.getText();
            StringSelection stringSelection = new StringSelection(myString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        }else{
            ToolTipManager.sharedInstance().setEnabled(false);
        }
    }//GEN-LAST:event_txtOutputMouseEntered

    private void txtOutputMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseExited
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(!txtOutput.getText().equals("")){
            ToolTipManager.sharedInstance().setEnabled(true);
            String myString = txtOutput.getText();
            StringSelection stringSelection = new StringSelection(myString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        }else{
            ToolTipManager.sharedInstance().setEnabled(false);
        }
    }//GEN-LAST:event_txtOutputMouseExited

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!txtInput.getText().equals("") && !txtOutput.getText().equals("") && !cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()).equals("")){
            SaveReadData save = new SaveReadData();
            try {
                if(save.mainRule(txtInput.getText(), txtOutput.getText(),cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()))){
                    JOptionPane.showMessageDialog(null,"Resource saved.","Saved", JOptionPane.NO_OPTION);
                }else{
                    JOptionPane.showMessageDialog(null,"Something wrong happend. Try again.","Alert", JOptionPane.ERROR);
                }
            } catch (IOException ex) {
                Logger.getLogger(EncryptMessagesScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (!txtInput.getText().equals("") && txtOutput.getText().equals("") && !cmbProtocol.getItemAt(cmbProtocol.getSelectedIndex()).equals("")){
            JOptionPane.showMessageDialog(null,"You must need process before save.","Alert", JOptionPane.WARNING_MESSAGE);
        }else
            JOptionPane.showMessageDialog(null,"Your input field is empty.","Alert", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnEnableFindModeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnEnableFindModeStateChanged
        // TODO add your handling code here:
        txtInput.setText("");
        txtOutput.setText("");
        
        btnEnableFindMode.setUI(new MetalToggleButtonUI() {
            @Override
            protected Color getSelectColor() {
                return Color.GREEN;
            }
        });
        
        if(btnEnableFindMode.getActionCommand().equals("OFF")){
            btnEnableFindMode.setText("ON");
            lblSearchMode.setText("Search mode activated. Try find some HASH in json our files. Just type in input field.");
            btnSave.setEnabled(false);
        }
        else{
            btnEnableFindMode.setText("OFF");
            lblSearchMode.setText("Helper");
            btnSave.setEnabled(true);
        }
    }//GEN-LAST:event_btnEnableFindModeStateChanged

    private void btnEnableFindModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableFindModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEnableFindModeActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EncryptMessagesScreen().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnClose;
    private javax.swing.JToggleButton btnEnableFindMode;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbProtocol;
    private javax.swing.JLabel lblInput;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblSearchMode;
    private javax.swing.JScrollPane scrlMainly1;
    private javax.swing.JScrollPane scrlOriginalMessage;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
